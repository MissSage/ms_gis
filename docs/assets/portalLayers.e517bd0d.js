var w=Object.defineProperty,T=Object.defineProperties;var M=Object.getOwnPropertyDescriptors;var d=Object.getOwnPropertySymbols;var v=Object.prototype.hasOwnProperty,j=Object.prototype.propertyIsEnumerable;var N=(e,r,a)=>r in e?w(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a,i=(e,r)=>{for(var a in r||(r={}))v.call(r,a)&&N(e,a,r[a]);if(d)for(var a of d(r))j.call(r,a)&&N(e,a,r[a]);return e},S=(e,r)=>T(e,M(r));import{eO as I,a3 as b}from"./vendor.faf54504.js";import{a as C}from"./lazyLayerLoader.17acb5bf.js";import{b as G,w as l,g as F,T as P,n as o}from"./layersLoader.0afd2648.js";import{s as u}from"./portalItemUtils.ae315894.js";import"./jsonContext.8b3f36b0.js";function te(e){return!e.portalItem||e.portalItem instanceof I||(e=S(i({},e),{portalItem:new I(e.portalItem)})),$(e.portalItem).then(r=>{const a=i({portalItem:e.portalItem},r.properties);return new r.constructor(a)})}function $(e){return e.load().then(O).then(D)}function O(e){switch(e.type){case"Map Service":return K(e);case"Feature Service":return V(e);case"Feature Collection":return x(e);case"Scene Service":return W(e);case"Image Service":return k(e);case"Stream Service":return A();case"Vector Tile Service":return B();case"GeoJson":return J();case"CSV":return R();case"KML":return U();case"WFS":return z();case"WMTS":return q();case"WMS":return E();case"Feed":return H();default:return Promise.reject(new b("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type}))}}function D(e){return(0,C[e.className])().then(r=>({constructor:r,properties:e.properties}))}function K(e){return X(e).then(r=>r?{className:"TileLayer"}:{className:"MapImageLayer"})}function V(e){return u(e,"Oriented Imagery Layer")?Q(e):h(e).then(r=>{if(typeof r=="object"){const a={};return r.id!=null&&(a.layerId=r.id),{className:r.className||"FeatureLayer",properties:a}}return{className:"GroupLayer"}})}function W(e){return h(e).then(r=>{if(typeof r=="object"){const a={};let t;if(r.id!=null?(a.layerId=r.id,t=`${e.url}/layers/${r.id}`):t=e.url,Array.isArray(e.typeKeywords)&&e.typeKeywords.length>0){const n={IntegratedMesh:"IntegratedMeshLayer","3DObject":"SceneLayer",Point:"SceneLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};for(const s of Object.keys(n))if(e.typeKeywords.includes(s))return{className:n[s]}}return o(t).then(n=>{let s="SceneLayer";const c={Point:"SceneLayer","3DObject":"SceneLayer",IntegratedMesh:"IntegratedMeshLayer",PointCloud:"PointCloudLayer",Building:"BuildingSceneLayer"};return n&&n.layerType&&c[n.layerType]&&(s=c[n.layerType]),{className:s,properties:a}})}return r===!1?o(e.url).then(a=>(a==null?void 0:a.layerType)==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}):{className:"GroupLayer"}})}async function x(e){await e.load();const r=u(e,"Map Notes"),a=u(e,"Markup");if(r||a)return{className:"MapNotesLayer"};if(u(e,"Route Layer"))return{className:"RouteLayer"};const t=await e.fetchData();return l(t)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function k(e){var c,m,p,f,L;await e.load();const r=(m=(c=e.typeKeywords)==null?void 0:c.map(g=>g.toLowerCase()))!=null?m:[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const a=(p=await e.fetchData())==null?void 0:p.layerType;if(a==="ArcGISTiledImageServiceLayer")return{className:"ImageryTileLayer"};if(a==="ArcGISImageServiceLayer")return{className:"ImageryLayer"};const t=await o(e.url),n=(f=t.cacheType)==null?void 0:f.toLowerCase(),s=(L=t.capabilities)==null?void 0:L.toLowerCase().includes("tilesonly");return n==="map"||s?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function A(){return{className:"StreamLayer"}}function B(){return{className:"VectorTileLayer"}}function J(){return{className:"GeoJSONLayer"}}function R(){return{className:"CSVLayer"}}function U(){return{className:"KMLLayer"}}function z(){return{className:"WFSLayer"}}function E(){return{className:"WMSLayer"}}function q(){return{className:"WMTSLayer"}}function H(){return{className:"StreamLayer"}}function Q(e){return e.load().then(()=>e.fetchData()).then(r=>r.coverage?{className:"GroupLayer"}:{className:"OrientedImageryLayer",properties:r})}function X(e){return o(e.url).then(r=>r.tileInfo)}function h(e){return!e.url||e.url.match(/\/\d+$/)?Promise.resolve({}):e.load().then(()=>e.fetchData()).then(async r=>{if(e.type==="Feature Service"){const a=y(await G(r,e.url));if(typeof a=="object"){const t=P(r);a.className=t.includes(a.id)?"SubtypeGroupLayer":"FeatureLayer"}return a}return l(r)>0?y(r):o(e.url).then(y)})}function y(e){return l(e)===1&&{id:F(e)}}export{te as fromItem,O as selectLayerClassPath};
