import{W as h,eF as u,hT as y,az as p,aA as n,gc as j,$ as w,aJ as b,aL as _}from"./vendor.faf54504.js";import{i as V}from"./utils.f12e4514.js";import{r as v}from"./GroupContainer.94274884.js";import{y as C}from"./LayerView2D.f9d8756f.js";import{i as d}from"./GraphicContainer.209d63bd.js";import{o as m}from"./BaseGraphicContainer.9e46822b.js";import{u as U}from"./LayerView.9097b9c4.js";import"./Utils.b66268a2.js";import"./number.30628ef2.js";import"./enums.2d9e6f64.js";import"./Texture.5f3d51a1.js";import"./VertexElementDescriptor.1fdca6da.js";import"./MaterialKey.41925623.js";import"./alignmentUtils.6849a0a8.js";import"./definitions.d3c1cadf.js";import"./WGLContainer.3275b1cd.js";import"./pixelUtils.34cd9289.js";import"./VertexArrayObject.cccbf8c8.js";import"./vec4f32.f3b49d2e.js";import"./ProgramTemplate.c4ecd603.js";import"./StyleDefinition.099454d7.js";import"./config.82550349.js";import"./GeometryUtils.51c4032a.js";import"./earcut.afc1d357.js";import"./cimAnalyzer.1303f7c5.js";import"./BidiEngine.d8bba3fc.js";import"./Rect.95b0fd2e.js";import"./callExpressionWithFeature.b04cd495.js";import"./GeometryUtils.4f19e772.js";import"./floatRGBA.bed38f50.js";import"./normalizeUtilsSync.c97dd948.js";import"./FeatureContainer.681e7125.js";import"./TileContainer.c0bbe6b2.js";import"./visualVariablesUtils.6a30877b.js";import"./visualVariablesUtils.017afb35.js";import"./Matcher.34d4c620.js";import"./tileUtils.909aef5e.js";import"./TileClipper.b1a84b9f.js";import"./Geometry.d049a63c.js";import"./ExpandedCIM.a540a237.js";import"./devEnvironmentUtils.d8d0484c.js";import"./schemaUtils.54e7aa39.js";import"./createSymbolSchema.9b74e55c.js";import"./util.2f95e8b0.js";import"./ComputedAttributeStorage.1bb13a38.js";import"./centroid.a98813ae.js";import"./vec3f32.1121a836.js";const g="sublayers",l="layerView",T=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends C(U){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new v}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),e=>e.hitTest(i).filter(t=>!!t.popupTemplate)).flat()}*graphicsViews(){h(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():h(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,e){return Array.from(this.graphicsViews(),t=>{const r=t.hitTest(i);if(h(this._graphicsViewsFeatureCollectionMap)){const a=this._graphicsViewsFeatureCollectionMap.get(t);for(const s of r)!s.popupTemplate&&a.popupTemplate&&(s.popupTemplate=a.popupTemplate),s.sourceLayer=s.layer=this.layer}return r}).flat().map(t=>({type:"graphic",graphic:t,layer:this.layer,mapPoint:i}))}highlight(i){let e;return typeof i=="number"?e=[i]:i instanceof u?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map(t=>t&&t.uid):y.isCollection(i)&&(e=i.map(t=>t&&t.uid).toArray()),e=e.filter(t=>t!=null),e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):T}update(i){for(const e of this.graphicsViews())e.processUpdate(i)}attach(){const i=this.view,e=()=>this.requestUpdate(),t=this.layer.featureCollections;if(h(t)&&t.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of t){const a=new d(this.view.featuresTilingScheme),s=new m({view:i,graphics:r.source,renderer:r.renderer,requestUpdateCallback:e,container:a});this._graphicsViewsFeatureCollectionMap.set(s,r),this.container.addChild(s.container),this.handles.add([p(()=>r.visible,o=>s.container.visible=o,n),p(()=>s.updating,()=>this.notifyChange("updating"),n)],l)}this._updateHighlight()}else h(this.layer.sublayers)&&this.handles.add(j(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),g)}detach(){this._destroyGraphicsViews(),this.handles.remove(g)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),w(this.layer.sublayers))return;const i=[],e=this.view,t=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new V,s=new d(this.view.featuresTilingScheme);s.fadeTransitionEnabled=!0;const o=new m({view:e,graphics:r.graphics,requestUpdateCallback:t,container:s});this.handles.add([r.on("graphic-update",o.graphicUpdateHandler),p(()=>r.visible,f=>o.container.visible=f,n),p(()=>o.updating,()=>this.notifyChange("updating"),n)],l),a.addChild(o.container),this.container.addChild(a),i.push(o)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e);this._highlightIds.set(e,t+1)}else this._highlightIds.set(e,1);this._updateHighlight()}_removeHighlight(i){for(const e of i)if(this._highlightIds.has(e)){const t=this._highlightIds.get(e)-1;t===0?this._highlightIds.delete(e):this._highlightIds.set(e,t)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const e of this.graphicsViews())e.setHighlight(i)}};c=b([_("esri.views.2d.layers.MapNotesLayerView2D")],c);const bi=c;export{bi as default};
