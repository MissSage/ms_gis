var V=Object.defineProperty,T=Object.defineProperties;var q=Object.getOwnPropertyDescriptors;var d=Object.getOwnPropertySymbols;var Q=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable;var y=(e,t,i)=>t in e?V(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,w=(e,t)=>{for(var i in t||(t={}))Q.call(t,i)&&y(e,i,t[i]);if(d)for(var i of d(t))S.call(t,i)&&y(e,i,t[i]);return e},g=(e,t)=>T(e,q(t));import{aD as c,aE as m,aF as _,Y as j,eG as U,O as F,mi as x,mj as C,mk as L,at as E,fD as P,a9 as f,c_ as I,K as R}from"./vendor.1bde3be2.js";import{t as k,o as b,n as v}from"./imageUtils.832bb1b5.js";import{y as D}from"./LayerView2D.b171dcd0.js";import{u as $}from"./LayerView.4356d8f0.js";import{i as z}from"./RefreshableLayerView.013b3b5b.js";import{s as G,a as A}from"./drapedUtils.548e20a2.js";import"./BitmapTileContainer.f825cea4.js";import"./Bitmap.5488614e.js";import"./utils.1743b4db.js";import"./Utils.7c0d2871.js";import"./number.30628ef2.js";import"./enums.2d9e6f64.js";import"./Texture.a39a8419.js";import"./VertexElementDescriptor.1fdca6da.js";import"./MaterialKey.5374c489.js";import"./alignmentUtils.6849a0a8.js";import"./definitions.d3c1cadf.js";import"./TileContainer.6e7a8f40.js";import"./WGLContainer.8d2598e5.js";import"./pixelUtils.56448565.js";import"./VertexArrayObject.1a48ce00.js";import"./vec4f32.f3b49d2e.js";import"./ProgramTemplate.1787c8d6.js";import"./StyleDefinition.c6d6e64a.js";import"./config.82550349.js";import"./GeometryUtils.51c4032a.js";import"./earcut.afc1d357.js";const B=e=>{let t=class extends e{async fetchPopupFeatures(i,r){const{layer:l}=this;if(!i)throw new j("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:l});if(l.type!=="tile")throw new j("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:l.type});const h=this.get("view.scale"),n=l.allSublayers.toArray().filter(s=>{const a=s.minScale===0||h<=s.minScale,o=s.maxScale===0||h>=s.maxScale;return s.popupTemplate&&s.popupEnabled&&s.visible&&a&&o});return U(n.map(async s=>{const a=s.createQuery(),o=F(r)?r.event:null,p=G({renderer:s.renderer,event:o});return a.geometry=this.createFetchPopupFeaturesQueryGeometry(i,p),a.outFields=await s.popupTemplate.getRequiredFields(),(await s.queryFeatures(a)).features})).then(s=>[].concat(...s.map(a=>a.value).filter(Boolean)))}};return c([m()],t.prototype,"layer",void 0),t=c([_("esri.layers.mixins.TileLayerView")],t),t},K=[0,0];let u=class extends B(z(k(D($)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new x(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new C({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(t,i)=>this.fetchTile(t,i)}),this._tileStrategy=new L({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.handles.add(E(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return P((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}createFetchPopupFeaturesQueryGeometry(e,t){return A(e,t,this.view)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(e=>this._enqueueTileFetch(e)))}isUpdating(){var e,t;return(t=(e=this._fetchQueue)==null?void 0:e.updating)!=null?t:!1}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(K,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:l=0}=t;if(!i)try{return await this._fetchImage(e,r)}catch(s){if(!f(s)&&!this.resampling)return b(this._tileInfoView.tileInfo.size);if(l<3){const a=this._tileInfoView.getTileParentId(e.id);if(a){const o=new I(a),p=await this.fetchTile(o,g(w({},t),{resamplingLevel:l+1}));return v(this._tileInfoView,p,o,e)}}throw s}const h=new I(0,0,0,0);let n;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,h,{signal:r}),h.level!==e.level&&!this.resampling)return b(this._tileInfoView.tileInfo.size);n=await this._fetchImage(h,r)}catch(s){if(f(s))throw s;n=await this._fetchImage(e,r)}return this.resampling?v(this._tileInfoView,n,h,e):n}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){f(t)||R.getLogger(this.declaredClass).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};c([m()],u.prototype,"_fetchQueue",void 0),c([m()],u.prototype,"resampling",null),u=c([_("esri.views.2d.layers.TileLayerView2D")],u);const _e=u;export{_e as default};
