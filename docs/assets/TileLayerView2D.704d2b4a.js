var T=Object.defineProperty,b=Object.defineProperties;var q=Object.getOwnPropertyDescriptors;var y=Object.getOwnPropertySymbols;var Q=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable;var d=(e,t,i)=>t in e?T(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,w=(e,t)=>{for(var i in t||(t={}))Q.call(t,i)&&d(e,i,t[i]);if(y)for(var i of y(t))S.call(t,i)&&d(e,i,t[i]);return e},g=(e,t)=>b(e,q(t));import{aq as c,ar as f,as as _,J as I,et as U,A as x,m5 as F,m6 as C,m7 as L,ag as P,fq as R,X as m,cN as j,x as E}from"./vendor.f59460b9.js";import{t as k,o as v,n as V}from"./imageUtils.8f6f8aa3.js";import{y as $}from"./LayerView2D.4cbf4b16.js";import{u as z}from"./LayerView.62cad0ec.js";import{i as A}from"./RefreshableLayerView.2e6bc086.js";import{s as B,a as D}from"./drapedUtils.6a06ba5f.js";import"./BitmapTileContainer.9eed1c6b.js";import"./Bitmap.3cb1ae16.js";import"./utils.2943fe63.js";import"./Utils.d99d4263.js";import"./number.30628ef2.js";import"./enums.2d9e6f64.js";import"./Texture.68429d95.js";import"./VertexElementDescriptor.1fdca6da.js";import"./MaterialKey.a0e626ef.js";import"./alignmentUtils.6849a0a8.js";import"./definitions.d3c1cadf.js";import"./TileContainer.2ecf5cfc.js";import"./WGLContainer.36a5457c.js";import"./pixelUtils.2345058e.js";import"./VertexArrayObject.aedfa412.js";import"./vec4f32.f3b49d2e.js";import"./ProgramTemplate.58a17754.js";import"./StyleDefinition.32daf7f5.js";import"./config.82550349.js";import"./GeometryUtils.51c4032a.js";import"./earcut.afc1d357.js";const G=e=>{let t=class extends e{async fetchPopupFeatures(i,r){const{layer:l}=this;if(!i)throw new I("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:l});if(l.type!=="tile")throw new I("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:l.type});const h=this.get("view.scale"),n=l.allSublayers.toArray().filter(s=>{const a=s.minScale===0||h<=s.minScale,o=s.maxScale===0||h>=s.maxScale;return s.popupTemplate&&s.popupEnabled&&s.visible&&a&&o});return U(n.map(async s=>{const a=s.createQuery(),o=x(r)?r.event:null,p=B({renderer:s.renderer,event:o});return a.geometry=this.createFetchPopupFeaturesQueryGeometry(i,p),a.outFields=await s.popupTemplate.getRequiredFields(),(await s.queryFeatures(a)).features})).then(s=>[].concat(...s.map(a=>a.value).filter(Boolean)))}};return c([f()],t.prototype,"layer",void 0),t=c([_("esri.layers.mixins.TileLayerView")],t),t},N=[0,0];let u=class extends G(A(k($(z)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new F(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new C({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(t,i)=>this.fetchTile(t,i)}),this._tileStrategy=new L({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.handles.add(P(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return R((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}createFetchPopupFeaturesQueryGeometry(e,t){return D(e,t,this.view)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(e=>this._enqueueTileFetch(e)))}isUpdating(){var e,t;return(t=(e=this._fetchQueue)==null?void 0:e.updating)!=null?t:!1}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(N,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:l=0}=t;if(!i)try{return await this._fetchImage(e,r)}catch(s){if(!m(s)&&!this.resampling)return v(this._tileInfoView.tileInfo.size);if(l<3){const a=this._tileInfoView.getTileParentId(e.id);if(a){const o=new j(a),p=await this.fetchTile(o,g(w({},t),{resamplingLevel:l+1}));return V(this._tileInfoView,p,o,e)}}throw s}const h=new j(0,0,0,0);let n;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,h,{signal:r}),h.level!==e.level&&!this.resampling)return v(this._tileInfoView.tileInfo.size);n=await this._fetchImage(h,r)}catch(s){if(m(s))throw s;n=await this._fetchImage(e,r)}return this.resampling?V(this._tileInfoView,n,h,e):n}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){m(t)||E.getLogger(this.declaredClass).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};c([f()],u.prototype,"_fetchQueue",void 0),c([f()],u.prototype,"resampling",null),u=c([_("esri.views.2d.layers.TileLayerView2D")],u);const _e=u;export{_e as default};
