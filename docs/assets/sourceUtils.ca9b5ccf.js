import{ou as y,ov as p,ow as w,ox as b,oy as I,eZ as f,U as h}from"./vendor.1bde3be2.js";class v{constructor(){this.code=null,this.description=null}}class j{constructor(t){this.error=new v,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function m(e){return new j(e)}class q{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function F(e){return new q(e)}const l=new Set;function G(e,t,i,g=!1,u){var c;l.clear();for(const s in i){const n=e.get(s);if(!n)continue;const a=i[s],r=S(n,a);if(r!==a&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:a,sanitizedValue:r}}),l.add(n.name),n&&(g||n.editable)){const d=b(n,r);if(d)return m(I(d,n,r));t[n.name]=r}}for(const s of(c=e==null?void 0:e.requiredFields)!=null?c:[])if(!l.has(s.name))return m(`missing required field "${s.name}"`);return null}function S(e,t){let i=t;return typeof t=="string"&&y(e)?i=parseFloat(t):t!=null&&p(e)&&typeof t!="string"&&(i=String(t)),w(i)}let o;function P(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(h(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function x(){return h(o)&&(o=await import("./geometryEngineJSON.d6a1f595.js")),o}async function V(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await x()}export{m as a,F as f,P as g,G as m,V as w};
