var d=Object.defineProperty,S=Object.defineProperties;var y=Object.getOwnPropertyDescriptors;var m=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var f=(i,t,e)=>t in i?d(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e,p=(i,t)=>{for(var e in t||(t={}))h.call(t,e)&&f(i,e,t[e]);if(m)for(var e of m(t))x.call(t,e)&&f(i,e,t[e]);return i},u=(i,t)=>S(i,y(t));import{W as n,ez as l,a5 as O,p0 as N}from"./vendor.faf54504.js";import{g as a,W as J,T as b,D as g,j as w}from"./pixelUtils.34cd9289.js";import{S as z,T as B,p as P}from"./RasterSymbolizer.7609c38a.js";import{l as k,i as v}from"./utils.957c7dfb.js";import{M as T,T as j,$ as D}from"./rasterProjectionHelper.ac99406d.js";import{d as F,m as R,f as E}from"./dataUtils.4042d7ab.js";class H{convertVectorFieldData(t){const e=a.fromJSON(t.pixelBlock),s=F(e,t.type);return Promise.resolve(n(s)&&s.toJSON())}async decode(t){const e=await z(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=a.fromJSON(t.pixelBlock),t.extent=t.extent?l.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(n(e)&&e.toJSON())}async updateSymbolizer(t){var e;this.symbolizer=B.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=k(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:l.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(s=>n(s)?a.fromJSON(s):null),primaryRasterIds:t.primaryRasterIds});return n(e)?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(a.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(n(e)&&e.toJSON())}estimateStatisticsHistograms(t){const e=P(a.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=J(a.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((s,r)=>{e.set(r,s==null?void 0:s.toJSON())}),Promise.resolve(e)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(c=>c?new a(c):null),s=b(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,o=s;return t.coefs&&(o=g(s,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=w(t.destDimension,t.gcsGrid),o=O(R(o,t.isUV?"vector-uv":"vector-magdir",r))),{pixelBlock:o==null?void 0:o.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const s={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:o}=await E(t.meshType,t.simulationSettings,s,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:o.buffer},transferList:[r.buffer,o.buffer]}}async getProjectionOffsetGrid(t){const e=l.fromJSON(t.projectedExtent),s=l.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new N({steps:t.datumTransformationSteps})),(t.includeGCSGrid||T(e.spatialReference,s.spatialReference,r))&&await j();const o=t.rasterTransform?v(t.rasterTransform):null;return D(u(p({},t),{projectedExtent:e,srcBufferExtent:s,datumTransformation:r,rasterTransform:o}))}}export{H as default};
