var j=Object.defineProperty,z=Object.defineProperties;var P=Object.getOwnPropertyDescriptors;var O=Object.getOwnPropertySymbols;var Y=Object.prototype.hasOwnProperty,K=Object.prototype.propertyIsEnumerable;var C=(t,e,i)=>e in t?j(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,M=(t,e)=>{for(var i in e||(e={}))Y.call(e,i)&&C(t,i,e[i]);if(O)for(var i of O(e))K.call(e,i)&&C(t,i,e[i]);return t},S=(t,e)=>z(t,P(e));import{m1 as Q,ev as G,ap as Z,aZ as R,hx as T,eQ as H,aM as q,m7 as k,at as B,eA as w,U as u,bu as J,eH as N,hE as W,g7 as X,eR as tt,hD as et,ey as it,O as g,ki as $,m2 as E,ee as b,aL as f,kz as st,m8 as A,a_ as ot,l_ as rt,m9 as nt,aH as U,K as at,Y as ht,aD as v,aE as m,aF as pt,lY as ct,aG as lt,eV as dt}from"./vendor.ad8aa1ba.js";import{k as D,j as F,n as vt,c as mt}from"./automaticLengthMeasurementUtils.d71dd38b.js";import{h as _t,D as yt}from"./GraphicMover.4ba29629.js";import{r as gt,n as ut}from"./TranslateTooltipInfos.d102e6af.js";import{u as xt}from"./automaticAreaMeasurementUtils.2b11ad93.js";import"./GraphicManipulator.685c4b39.js";import"./drapedUtils.2ea7f62a.js";import"./earcut.afc1d357.js";import"./triangle.e65b7c06.js";import"./lineSegment.bfe799ff.js";class ft{constructor(e,i,s){this.graphic=e,this.mover=i,this.selected=s,this.type="reshape-start"}}class Gt{constructor(e,i,s){this.graphic=e,this.mover=i,this.selected=s,this.type="reshape"}}class bt{constructor(e,i,s){this.graphic=e,this.mover=i,this.selected=s,this.type="reshape-stop"}}class Vt{constructor(e,i,s){this.mover=e,this.dx=i,this.dy=s,this.type="move-start"}}class wt{constructor(e,i,s){this.mover=e,this.dx=i,this.dy=s,this.type="move"}}class Mt{constructor(e,i,s){this.mover=e,this.dx=i,this.dy=s,this.type="move-stop"}}class St{constructor(e){this.added=e,this.type="vertex-select"}}class Et{constructor(e){this.removed=e,this.type="vertex-deselect"}}class kt{constructor(e,i,s,o){this.added=e,this.graphic=i,this.oldGraphic=s,this.vertices=o,this.type="vertex-add"}}class It{constructor(e,i,s,o){this.removed=e,this.graphic=i,this.oldGraphic=s,this.vertices=o,this.type="vertex-remove"}}const _=Q.reshapeGraphics,I={vertices:{default:new G({style:"circle",size:_.vertex.size,color:_.vertex.color,outline:{color:_.vertex.outlineColor,width:1}}),hover:new G({style:"circle",size:_.vertex.hoverSize,color:_.vertex.hoverColor,outline:{color:_.vertex.hoverOutlineColor,width:1}}),selected:new G({style:"circle",size:_.selected.size,color:_.selected.color,outline:{color:_.selected.outlineColor,width:1}})},midpoints:{default:new G({style:"circle",size:_.midpoint.size,color:_.midpoint.color,outline:{color:_.midpoint.outlineColor,width:1}}),hover:new G({style:"circle",size:_.midpoint.size,color:_.midpoint.color,outline:{color:_.midpoint.outlineColor,width:1}})}};let d=class extends Z.EventedAccessor{constructor(t){super(t),this._activeOperationInfo=null,this._editGeometryOperations=null,this._handles=new R,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingTask=null,this._stagedVertex=null,this._tooltip=null,this._viewHandles=new R,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.layer=null,this.midpointGraphics=new T,this.midpointSymbol=new G({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=[],this.snappingManager=null,this.tooltipOptions=new H,this.type="reshape",this.vertexGraphics=new T,this.view=null}initialize(){const t=this.view;this._highlightHelper=new _t({view:t}),this._setup(),this._handles.add([q(()=>t==null?void 0:t.ready,()=>{const{layer:e,view:i}=this;ct(i,e),this._viewHandles.add(i.on("key-down",s=>this._keyDownHandler(s),lt.TOOL))},{once:!0,initial:!0}),k(()=>this.graphic,()=>this.refresh()),k(()=>this.layer,(e,i)=>{i&&(this._clearSelection(),this._resetGraphics(i)),this.refresh()}),k(()=>this.enableMidpoints,()=>this.refresh()),B(()=>this.tooltipOptions.enabled,e=>{this._tooltip=e?new mt({view:this.view}):w(this._tooltip)},dt)])}destroy(){var t;this._reset(),(t=this._mover)==null||t.destroy(),this._mover=null,this._tooltip=w(this._tooltip),this._handles=w(this._handles),this._viewHandles=w(this._viewHandles)}set highlightsEnabled(t){var e;(e=this._highlightHelper)==null||e.removeAll(),this._set("highlightsEnabled",t),this._setUpHighlights()}get state(){const t=!!this.get("view.ready"),e=!(!this.get("graphic")||!this.get("layer"));return t&&e?"active":t?"ready":"disabled"}set symbols(t){const{midpoints:e=I.midpoints,vertices:i=I.vertices}=t||{};this._set("symbols",{midpoints:e,vertices:i})}isUIGraphic(t){const e=[];return this.graphic&&e.push(this.graphic),e.concat(this.vertexGraphics.items,this.midpointGraphics.items),e.length&&e.includes(t)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_setup(){const{graphic:t,layer:e}=this;if(!e||!t||u(t.geometry))return;const i=t.geometry;i.type!=="mesh"&&i.type!=="extent"?(i.type==="polygon"&&J(i),this._setUpHighlights(),this._setupGraphics(),this._setupMover()):this._logGeometryTypeError()}_setUpHighlights(){this.highlightsEnabled&&this.graphic&&this._highlightHelper.add(this.graphic)}_setUpGeometryHelper(){const t=this.graphic.geometry;if(u(t)||t.type==="mesh"||t.type==="extent")return void this._logGeometryTypeError();const e=t.type==="multipoint"?new N({paths:t.points,spatialReference:t.spatialReference}):t;this._editGeometryOperations=W.fromGeometry(e,X.Local)}_saveSnappingContextForHandle(t,e){var i;this._snappingGraphicsLayer=new tt({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer),this._snappingContext=new et({editGeometryOperations:this._editGeometryOperations,elevationInfo:{mode:"on-the-ground",offset:0},pointer:((i=e.viewEvent)==null?void 0:i.pointerType)||"mouse",excludeFeature:this.graphic,visualizer:new it(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(t)})}_reset(){this._clearSelection(),this._highlightHelper.removeAll(),this._updateTooltip(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default"}_resetSnappingStateVars(){var t;g(this.snappingManager)&&this.snappingManager.doneSnapping(),g(this._snappingGraphicsLayer)&&(((t=this.view)==null?void 0:t.map)&&this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),this._editGeometryOperations=w(this._editGeometryOperations),this._snappingTask=$(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null}_resetGraphics(t){this._removeMidpointGraphics(t),this._removeVertexGraphics(t),this._set("selectedVertices",[])}_removeMidpointGraphics(t){const e=t||this.layer;e&&e.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach(i=>i.destroy()),this.midpointGraphics.removeAll()}_removeVertexGraphics(t){const e=t||this.layer;e&&e.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach(i=>i.destroy()),this.vertexGraphics.removeAll()}_getCoordinatesForUI(t){const e=E(t.clone());if(t.type==="polygon")for(const i of e){const s=i[i.length-1];i[0][0]===s[0]&&i[0][1]===s[1]&&i.length>2&&i.pop()}return e}_setupGraphics(){const t=this.graphic.geometry;if(g(t)&&(t.type==="polyline"||t.type==="polygon")){const e=this._getCoordinatesForUI(t);this.enableMidpoints&&this._setUpMidpointGraphics(e),this.enableVertices&&this._setUpVertexGraphics(e)}}_setUpMidpointGraphics(t){this._removeMidpointGraphics();const e=this._createMidpointGraphics(t);this.midpointGraphics.addMany(e),this.layer.addMany(e)}_setUpVertexGraphics(t){this._removeVertexGraphics();const e=this._createVertexGraphics(t);this.vertexGraphics.addMany(e),this._storeRelatedVertexIndices(),this.layer.addMany(e)}_createVertexGraphics(t){const{_graphicAttributes:e,symbols:i,view:{spatialReference:s}}=this,o=[];return t==null||t.forEach((n,r)=>{n.forEach((h,p)=>{var l;const[a,c]=h;o.push(new b({geometry:new f({x:a,y:c,spatialReference:s}),symbol:(l=i==null?void 0:i.vertices)==null?void 0:l.default,attributes:S(M({},e),{pathIndex:r,pointIndex:p})}))})}),o}_createMidpointGraphics(t){const{_graphicAttributes:e,symbols:i,view:{spatialReference:s}}=this,o=[];return t==null||t.forEach((n,r)=>{n.forEach((h,p)=>{const[a,c]=h,l=n[p+1]?p+1:0;if(st(this.graphic.geometry,"type")==="polygon"||l!==0){const[y,x]=n[l],[V,L]=A([a,c],[y,x]);o.push(new b({geometry:new f({x:V,y:L,spatialReference:s}),symbol:i.midpoints.default,attributes:S(M({},e),{pathIndex:r,pointIndexStart:p,pointIndexEnd:l})}))}})}),o}_storeRelatedVertexIndices(){const t=this.vertexGraphics.items;if(!t)return;const e=t.map(({geometry:i})=>({x:i.x,y:i.y}));for(let i=0;i<e.length;i++){const s=[];for(let o=0;o<e.length;o++){if(i===o)continue;const n=e[i],r=e[o];n.x===r.x&&n.y===r.y&&s.push(o)}t[i].attributes.relatedGraphicIndices=s}}_setupMover(){const{enableMovement:t,graphic:e,midpointGraphics:i,vertexGraphics:s,view:o}=this,n=s.concat(i).items;t&&n.push(e),this._mover=new yt({enableMoveAllGraphics:!1,highlightsEnabled:!1,indicatorsEnabled:!1,graphics:n,view:o,callbacks:{onGraphicClick:r=>this._onGraphicClickCallback(r),onGraphicMoveStart:r=>this._onGraphicMoveStartCallback(r),onGraphicMove:r=>this._onGraphicMoveCallback(r),onGraphicMoveStop:r=>this._onGraphicMoveStopCallback(r),onGraphicPointerOver:r=>this._onGraphicPointerOverCallback(r),onGraphicPointerOut:r=>this._onGraphicPointerOutCallback(r)}})}_onGraphicClickCallback(t){t.viewEvent.stopPropagation();const e=t.graphic;if(e===this.graphic)this.clearSelection(),this.emit("graphic-click",t),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(t);else if(this._isMidpoint(e)){if(t.viewEvent.button===2)return;const i=this.graphic.clone(),s=this._createVertexFromMidpoint(e);this.refresh(),this._emitVertexAddEvent([e],i,s)}else this._isVertex(e)&&(t.viewEvent.stopPropagation(),t.viewEvent.button===2?this._removeVertices(e):(t.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(e)?this._removeFromSelection(e,!0):this._addToSelection(e)))}_setUpOperation(t){const{graphic:e,dx:i,dy:s}=t,o=e===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(e,t),this._activeOperationInfo={target:this.graphic,mover:e,operationType:o?"move":"reshape",totalDx:i,totalDy:s}}_onGraphicMoveStartCallback(t){const{dx:e,dy:i,graphic:s}=t;if(s===this.graphic){const{geometry:o}=s;return this._setUpOperation(t),this._emitMoveStartEvent(e,i),void(g(o)&&o.type==="point"&&this._onHandleMove(s,e,i,t,()=>{this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(e,i)}))}if(!this.selectedVertices.includes(s)){if(this._clearSelection(),this._isMidpoint(s)){const o=this.graphic.clone(),n=this._createVertexFromMidpoint(s);this._emitVertexAddEvent([s],o,n)}this._addToSelection(s)}this._setUpOperation(t),this._emitReshapeStartEvent(s),this._onHandleMove(s,e,i,t,()=>{this._updateTooltip(s,t.viewEvent),this._emitReshapeEvent(s)})}_onGraphicMoveCallback(t){const{dx:e,dy:i,graphic:s}=t;this._activeOperationInfo.totalDx+=e,this._activeOperationInfo.totalDy+=i;const{operationType:o}=this._activeOperationInfo,{geometry:n}=s;if(!u(n)){if(o!=="move")this._onHandleMove(s,e,i,t,()=>{this._updateTooltip(s,t.viewEvent),this._emitReshapeEvent(s)});else if(n.type==="point")this._onHandleMove(s,e,i,t,()=>{this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(e,i)});else if(n.type==="polyline"||n.type==="polygon"){const r=this._getCoordinatesForUI(n);this._updateVertexGraphicLocations(r),this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(e,i)}}}_onGraphicMoveStopCallback(t){const{dx:e,dy:i,graphic:s}=t,{operationType:o}=this._activeOperationInfo;this._activeOperationInfo.totalDx+=e,this._activeOperationInfo.totalDy+=i,this._onHandleMove(s,e,i,t,()=>o==="move"?this._emitMoveStopEvent():this._emitReshapeStopEvent(s)),this._isMidpoint(s)?this.refresh():(this._updateTooltip(this._isVertex(s)?s:null),this._resetSnappingStateVars(),this._activeOperationInfo=null)}_updateVertexGraphicLocations(t){const e=this.view.spatialReference;for(const i of this.vertexGraphics){const{pathIndex:s,pointIndex:o}=i.attributes,[n,r]=t[s][o];i.geometry=new f({x:n,y:r,spatialReference:e})}this._updateMidpointGraphicLocations(t)}_updateMidpointGraphicLocations(t){for(const e of this.midpointGraphics){const{pathIndex:i,pointIndexStart:s,pointIndexEnd:o}=e.attributes,[n,r]=t[i][s],[h,p]=t[i][o],[a,c]=A([n,r],[h,p]);e.geometry=new f({x:a,y:c,spatialReference:this.view.spatialReference})}}_getIndicesForVertexGraphic({attributes:t}){return[(t==null?void 0:t.pathIndex)||0,(t==null?void 0:t.pointIndex)||0]}_getVertexFromEditGeometry(t){const[e,i]=this._getIndicesForVertexGraphic(t);return this._editGeometryOperations.data.components[e].vertices[i]}_onHandleMove(t,e,i,s,o){if($(this._snappingTask),!this._snappingContext)return;const n=t.geometry,r=s.type==="graphic-move-stop";if(g(this.snappingManager)&&this.selectedVertices.length<2&&!r){const h=this.snappingManager;this._stagedVertex=h.update({point:n,context:this._snappingContext}),this._syncGeometryAfterVertexMove(t,new f(this._stagedVertex),e,i,r),o(),this._snappingTask=ot(async p=>{const a=await h.snap({point:n,context:this._snappingContext,signal:p});a.valid&&(this._stagedVertex=a.apply(),this._syncGeometryAfterVertexMove(t,new f(this._stagedVertex),e,i,r),o())})}else{const h=g(this._stagedVertex)?new f(this._stagedVertex):n;this._syncGeometryAfterVertexMove(t,h,e,i,r),o()}}async _syncGeometryAfterVertexMove(t,e,i,s,o=!1){const n=this._editGeometryOperations.data.geometry;if(n.type==="point")t.geometry=e;else{const{x:r,y:h}=e,[p,a]=this._getIndicesForVertexGraphic(t);let c=E(n);const l=c[p].length-1;c[p][a]=[r,h],n.type==="polygon"&&(a===0?c[p][l]=[r,h]:a===l&&(c[p][0]=[r,h])),this._isVertex(t)&&(c=this._moveRelatedCoordinates(c,t,r,h),c=this._moveSelectedHandleCoordinates(c,t,i,s,n.type==="polygon"),this._updateMidpointGraphicLocations(c)),this.graphic.geometry=n.clone();const y=this._getVertexFromEditGeometry(t),x=r-y.pos[0],V=h-y.pos[1];this._editGeometryOperations.moveVertices([y],x,V,0),o&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(t),e):t.geometry=e)}}_moveRelatedCoordinates(t,e,i,s){const{relatedGraphicIndices:o}=e.attributes;for(const n of o){const r=this.vertexGraphics.getItemAt(n),{pathIndex:h,pointIndex:p}=r.attributes;t[h][p]=[i,s],r.geometry=e.geometry}return t}_moveSelectedHandleCoordinates(t,e,i,s,o){for(const n of this.selectedVertices)if(n!==e){const{pathIndex:r,pointIndex:h,relatedGraphicIndices:p}=n.attributes,a=rt(n.geometry,i,s,this.view),c=t[r].length-1;t[r][h]=[a.x,a.y],n.geometry=a,o&&(h===0?t[r][c]=[a.x,a.y]:h===c&&(t[r][0]=[a.x,a.y]));for(const l of p){const y=this.vertexGraphics.getItemAt(l),{pathIndex:x,pointIndex:V}=y.attributes;t[x][V]=[a.x,a.y],y.geometry=a}}return t}_onGraphicPointerOverCallback(t){const e=t.graphic,i=this._isVertex(e);i&&!this._isSelected(e)&&(e.symbol=this.symbols.vertices.hover),this._updateTooltip(i?e:null),this._updateHoverCursor(e)}_onGraphicPointerOutCallback(t){const e=t.graphic;this._isVertex(e)&&!this._isSelected(e)&&(e.symbol=this.symbols.vertices.default),this.view.cursor="default",this._updateTooltip()}_createVertexFromMidpoint(t){const{_graphicAttributes:e,graphic:i}=this,s=i.geometry;if(u(s)||s.type!=="polygon"&&s.type!=="polyline")return[];const o=s.clone(),n=[],{pathIndex:r,pointIndexStart:h,pointIndexEnd:p}=t.attributes,{x:a,y:c}=t.geometry,l=p===0?h+1:p,y=E(o);return y[r].splice(l,0,[a,c]),t.attributes=S(M({},e),{pathIndex:r,pointIndex:l,relatedGraphicIndices:[]}),n.push({coordinates:y[r][l],componentIndex:r,vertexIndex:l}),this.graphic.geometry=o,n}_addToSelection(t){t instanceof b&&(t=[t]);for(const e of t)e.symbol=this.symbols.vertices.selected;this._set("selectedVertices",this.selectedVertices.concat(t)),this._emitSelectEvent(t)}_removeFromSelection(t,e){const{vertices:i}=this.symbols,s=e?i.hover:i.default;t instanceof b&&(t=[t]);for(const o of t)this.selectedVertices.splice(this.selectedVertices.indexOf(o),1),this._set("selectedVertices",this.selectedVertices),o.set("symbol",s);this._emitDeselectEvent(t)}_clearSelection(){if(this.selectedVertices.length){const t=this.selectedVertices;for(const e of this.selectedVertices)e.set("symbol",this.symbols.vertices.default);this._set("selectedVertices",[]),this._emitDeselectEvent(t)}}_keyDownHandler(t){nt.delete.includes(t.key)&&!t.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(t){const e=this.graphic.geometry;if(u(e)||e.type!=="polygon"&&e.type!=="polyline"||e.type==="polygon"&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;t instanceof b&&(t=[t]);const i=this.graphic.clone(),s=e.clone();let o=E(s);const n=[];t instanceof b&&(t=[t]);for(const r of t){const{x:h,y:p}=r.geometry;for(let a=0;a<o.length;a++){const c=o[a];for(let l=0;l<c.length;l++){const[y,x]=c[l];h===y&&p===x&&(n.push({coordinates:o[a][l],componentIndex:a,vertexIndex:l}),o[a].splice(Number(l),1))}}}if(s.type==="polygon")o=o.filter(r=>{if(r.length<2)return!1;const[h,p]=r[0],[a,c]=r[r.length-1];return(r.length!==2||h!==a||p!==c)&&(h===a&&p===c||r.push(r[0]),!0)}),s.rings=o;else{for(const r of o)r.length===1&&o.splice(o.indexOf(r),1);s.paths=o}this.graphic.geometry=s,this.refresh(),this._emitVertexRemoveEvent(t,i,n)}_isVertex(t){return this.vertexGraphics.includes(t)}_isSelected(t){return this._isVertex(t)&&this.selectedVertices.includes(t)}_isMidpoint(t){return this.midpointGraphics.includes(t)}_updateHoverCursor(t){this.view.cursor=this._isMidpoint(t)?"copy":"move"}_updateTooltip(t,e){u(this._tooltip)||(t?t===this.graphic?this._updateMoveGraphicTooltip(e):this._updateMoveVertexTooltip(e):this._tooltip.clear())}_updateMoveGraphicTooltip(t){const{_tooltip:e,tooltipOptions:i,view:s}=this;if(u(e))return;const o=new gt({tooltipOptions:i});if(t){const{x:n,y:r}=t.origin,h=s.toMap(t),p=s.toMap(U(n,r)),a=D(p,h);o.distance=g(a)?a:F}e.info=o}_updateMoveVertexTooltip(t){const{_tooltip:e,graphic:{geometry:i},tooltipOptions:s,view:o}=this;if(u(e))return;const n=new ut({tooltipOptions:s});if(g(i)&&(i.type==="polygon"?n.area=xt(i):i.type==="polyline"&&(n.totalLength=vt(i))),t){const{x:r,y:h}=t.origin,p=o.toMap(t),a=o.toMap(U(r,h)),c=D(a,p);n.distance=g(c)?c:F}e.info=n}_emitMoveStartEvent(t,e){const i=new Vt(this.graphic,t,e);this.emit("move-start",i),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(i)}_emitMoveEvent(t,e){const i=new wt(this.graphic,t,e);this.emit("move",i),this.callbacks.onMove&&this.callbacks.onMove(i)}_emitMoveStopEvent(){const{totalDx:t,totalDy:e}=this._activeOperationInfo,i=new Mt(this.graphic,t,e);this.emit("move-stop",i),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(i)}_emitReshapeStartEvent(t){const e=new ft(this.graphic,t,this.selectedVertices);this.emit("reshape-start",e),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(e)}_emitReshapeEvent(t){const e=new Gt(this.graphic,t,this.selectedVertices);this.emit("reshape",e),this.callbacks.onReshape&&this.callbacks.onReshape(e)}_emitReshapeStopEvent(t){const e=new bt(this.graphic,t,this.selectedVertices);this.emit("reshape-stop",e),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(e)}_emitSelectEvent(t){const e=new St(t);this.emit("select",e),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(e)}_emitDeselectEvent(t){const e=new Et(t);this.emit("deselect",e),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(e)}_emitVertexAddEvent(t,e,i){const s=new kt(t,this.graphic,e,i);this.emit("vertex-add",s),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(s)}_emitVertexRemoveEvent(t,e,i){const s=new It(t,this.graphic,e,i);this.emit("vertex-remove",s),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(s)}_logGeometryTypeError(){at.getLogger(this.declaredClass).error(new ht("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."))}};v([m()],d.prototype,"_tooltip",void 0),v([m()],d.prototype,"callbacks",void 0),v([m()],d.prototype,"enableMidpoints",void 0),v([m()],d.prototype,"enableMovement",void 0),v([m()],d.prototype,"enableVertices",void 0),v([m()],d.prototype,"graphic",void 0),v([m({value:!0})],d.prototype,"highlightsEnabled",null),v([m()],d.prototype,"layer",void 0),v([m({readOnly:!0})],d.prototype,"midpointGraphics",void 0),v([m()],d.prototype,"midpointSymbol",void 0),v([m({readOnly:!0})],d.prototype,"selectedVertices",void 0),v([m()],d.prototype,"snappingManager",void 0),v([m({readOnly:!0})],d.prototype,"state",null),v([m({value:I})],d.prototype,"symbols",null),v([m({type:H})],d.prototype,"tooltipOptions",void 0),v([m({readOnly:!0})],d.prototype,"type",void 0),v([m({readOnly:!0})],d.prototype,"vertexGraphics",void 0),v([m()],d.prototype,"view",void 0),d=v([pt("esri.views.draw.support.Reshape")],d);const jt=d;export{jt as default};
