var d=Object.defineProperty,S=Object.defineProperties;var y=Object.getOwnPropertyDescriptors;var m=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var f=(i,e,t)=>e in i?d(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,p=(i,e)=>{for(var t in e||(e={}))h.call(e,t)&&f(i,t,e[t]);if(m)for(var t of m(e))x.call(e,t)&&f(i,t,e[t]);return i},u=(i,e)=>S(i,y(e));import{A as n,eg as l,M as O,oJ as N}from"./vendor.150443b7.js";import{g as a,W as J,T as b,D as g,j as w}from"./pixelUtils.e6b9584d.js";import{S as B,T as P,p as k}from"./RasterSymbolizer.8f9c8505.js";import{l as z,i as v}from"./utils.20e1880f.js";import{M as T,T as j,$ as D}from"./rasterProjectionHelper.67779abb.js";import{d as F,m as R,f as E}from"./dataUtils.e1b7cca3.js";class H{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),s=F(t,e.type);return Promise.resolve(n(s)&&s.toJSON())}async decode(e){const t=await B(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?l.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(n(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=P.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=z(e.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:l.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map(s=>n(s)?a.fromJSON(s):null),primaryRasterIds:e.primaryRasterIds});return n(t)?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(n(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=k(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=J(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,o)=>{t.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(c=>c?new a(c):null),s=b(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let o,r=s;return e.coefs&&(r=g(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(o=w(e.destDimension,e.gcsGrid),r=O(R(r,e.isUV?"vector-uv":"vector-magdir",o))),{pixelBlock:r==null?void 0:r.toJSON(),localNorthDirections:o}}async createFlowMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:r}=await E(e.meshType,e.simulationSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:r.buffer},transferList:[o.buffer,r.buffer]}}async getProjectionOffsetGrid(e){const t=l.fromJSON(e.projectedExtent),s=l.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new N({steps:e.datumTransformationSteps})),(e.includeGCSGrid||T(t.spatialReference,s.spatialReference,o))&&await j();const r=e.rasterTransform?v(e.rasterTransform):null;return D(u(p({},e),{projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:r}))}}export{H as default};
