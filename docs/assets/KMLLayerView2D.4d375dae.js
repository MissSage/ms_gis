var W=Object.defineProperty;var k=Object.getOwnPropertySymbols;var H=Object.prototype.hasOwnProperty,Y=Object.prototype.propertyIsEnumerable;var A=(t,e,i)=>e in t?W(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,b=(t,e)=>{for(var i in e||(e={}))H.call(e,i)&&A(t,i,e[i]);if(k)for(var i of k(e))Y.call(e,i)&&A(t,i,e[i]);return t};import{er as C,aL as L,a1 as K,nh as S,hx as J,at as Q,e8 as G,O as I,U as X,nj as Z,bo as q,ns as ee,my as B,nt as te,mA as ie,aD as w,aE as x,aF as ae}from"./vendor.ad8aa1ba.js";import{b as D,g as se,d as re}from"./kmlUtils.b89e8c50.js";import{S as oe,T as ne,R as le}from"./Bitmap.11b33ab6.js";import{a as pe}from"./BitmapContainer.b79f1977.js";import{y as he}from"./LayerView2D.dfaa8db6.js";import{i as T}from"./GraphicContainer.3ecde44c.js";import{o as M}from"./BaseGraphicContainer.fc5d4975.js";import{u as me}from"./LayerView.e359e190.js";import{C as ce,$ as de}from"./rasterProjectionHelper.177984dc.js";import{a as ue,e as ge}from"./WGLContainer.af3d731a.js";import{y as _e,o as fe}from"./RenderingContext.475aea02.js";import{P as R,G as U,D as N,L as O,Y as ye,V as we,f as F}from"./enums.2d9e6f64.js";import{x as be}from"./VertexArrayObject.6d35aaee.js";import{E as z}from"./Texture.22d23c43.js";import"./utils.baffb554.js";import"./Utils.4c2feac4.js";import"./number.30628ef2.js";import"./VertexElementDescriptor.1fdca6da.js";import"./MaterialKey.6f6162d1.js";import"./alignmentUtils.6849a0a8.js";import"./definitions.d3c1cadf.js";import"./cimAnalyzer.209d4429.js";import"./fontUtils.c3d9f30f.js";import"./BidiEngine.d8bba3fc.js";import"./Rect.95b0fd2e.js";import"./callExpressionWithFeature.ebb41fc5.js";import"./GeometryUtils.4f19e772.js";import"./floatRGBA.cc457c75.js";import"./normalizeUtilsSync.b16e64df.js";import"./FeatureContainer.f0f5888c.js";import"./TileContainer.9a7cb2ee.js";import"./visualVariablesUtils.8e59fa54.js";import"./visualVariablesUtils.551507c0.js";import"./Matcher.d6847bda.js";import"./tileUtils.eab69325.js";import"./TileClipper.51ce0e42.js";import"./Geometry.d049a63c.js";import"./GeometryUtils.51c4032a.js";import"./earcut.afc1d357.js";import"./ExpandedCIM.a759c9e9.js";import"./schemaUtils.9f875565.js";import"./createSymbolSchema.85d3f514.js";import"./util.69d9a6e8.js";import"./ComputedAttributeStorage.23683ac7.js";import"./centroid.7be204a9.js";import"./vec3f32.1121a836.js";import"./pixelUtils.62190471.js";import"./vec4f32.f3b49d2e.js";import"./ProgramTemplate.83597331.js";import"./StyleDefinition.02cc41be.js";import"./config.82550349.js";import"./programUtils.7f0d671d.js";import"./NestedMap.6f8cbc5c.js";import"./OrderIndependentTransparency.9f3f7312.js";class h{constructor(e){if(e)this._ownsRctx=!1,this._rctx=e;else{if(h._instance)return h._instanceRefCount++,h._instance;h._instanceRefCount=1,h._instance=this,this._ownsRctx=!0;const a=document.createElement("canvas").getContext("webgl");a.getExtension("OES_texture_float"),this._rctx=new _e(a,{})}const i={applyProjection:!0,bilinear:!1,bicubic:!1},r=fe("raster/reproject","raster/reproject",new Map([["a_position",0]]),i);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ue(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(e,i,r=!1){const a=C(e.extent,i),s=new L({x:(e.extent.xmax-e.extent.xmin)/e.texture.descriptor.width,y:(e.extent.ymax-e.extent.ymin)/e.texture.descriptor.height,spatialReference:e.extent.spatialReference}),{x:o,y:m}=ce(s,i,e.extent);let p=(o+m)/2;const n=Math.round((a.xmax-a.xmin)/p),c=Math.round((a.ymax-a.ymin)/p);p=(a.width/n+a.height/c)/2;const V=new L({x:p,y:p,spatialReference:a.spatialReference}),f=de({projectedExtent:a,srcBufferExtent:e.extent,pixelSize:V,hasWrapAround:!0,spacing:[16,16]}),y=ge(this._rctx,f),u=new z(this._rctx,{width:n,height:c,pixelFormat:R.RGBA,dataType:U.UNSIGNED_BYTE,wrapMode:N.CLAMP_TO_EDGE,samplingMode:O.LINEAR,hasMipmap:!1}),l=new be(this._rctx,{colorTarget:ye.TEXTURE,depthStencilTarget:we.NONE,width:n,height:c},u);if(this._rctx.bindFramebuffer(l),this._rctx.setViewport(0,0,n,c),this._rctx.useProgram(this._program),this._rctx.bindTexture(e.texture,0),this._rctx.bindTexture(y,1),this._quad.bind(),this._program.setUniform2f("u_srcImageSize",e.texture.descriptor.width,e.texture.descriptor.height),this._program.setUniform2fv("u_transformSpacing",f.spacing),this._program.setUniform2fv("u_transformGridSize",f.size),this._program.setUniform2f("u_targetImageSize",n,c),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),y.dispose(),r){const g=new ImageData(l.descriptor.width,l.descriptor.height);return l.readPixels(0,0,l.descriptor.width,l.descriptor.height,R.RGBA,U.UNSIGNED_BYTE,g.data),l.detachColorTexture(F.COLOR_ATTACHMENT0),l.dispose(),{texture:u,extent:a,imageData:g}}return l.detachColorTexture(F.COLOR_ATTACHMENT0),l.dispose(),{texture:u,extent:a}}reprojectBitmapData(e,i){const r=oe(e.bitmapData)?ne(e.bitmapData):e.bitmapData,a=new z(this._rctx,{width:e.bitmapData.width,height:e.bitmapData.height,pixelFormat:R.RGBA,dataType:U.UNSIGNED_BYTE,wrapMode:N.CLAMP_TO_EDGE,samplingMode:O.LINEAR,hasMipmap:!1},r),s=this.reprojectTexture({texture:a,extent:e.extent},i,!0);s.texture.dispose();const o=document.createElement("canvas");return o.width=s.imageData.width,o.height=s.imageData.height,o.getContext("2d").putImageData(s.imageData,0,0),{bitmapData:o,extent:s.extent}}async loadAndReprojectBitmapData(e,i,r){const a=(await K(e,{responseType:"image"})).data,s=document.createElement("canvas");s.width=a.width,s.height=a.height;const o=s.getContext("2d");o.drawImage(a,0,0);const m=o.getImageData(0,0,s.width,s.height);if(i.spatialReference.equals(r))return{bitmapData:m,extent:i};const p=this.reprojectBitmapData({bitmapData:m,extent:i},r);return{bitmapData:p.bitmapData,extent:p.extent}}destroy(){this._ownsRctx?(h._instanceRefCount--,h._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),h._instance=null)):(this._quad.dispose(),this._program.dispose())}}h._instanceRefCount=0;class ${constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let d=class extends he(me){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new pe,this._kmlVisualData=new $,this.allVisiblePoints=new S,this.allVisiblePolylines=new S,this.allVisiblePolygons=new S,this.allVisibleMapImages=new J}async hitTest(t,e){var r,a,s;const i=this.layer;return[(r=this._pointsView)==null?void 0:r.hitTest(t),(a=this._polylinesView)==null?void 0:a.hitTest(t),(s=this._polygonsView)==null?void 0:s.hitTest(t)].flat().filter(Boolean).map(o=>(o.layer=i,o.sourceLayer=i,{type:"graphic",graphic:o,layer:i,mapPoint:t}))}update(t){this._polygonsView&&this._polygonsView.processUpdate(t),this._polylinesView&&this._polylinesView.processUpdate(t),this._pointsView&&this._pointsView.processUpdate(t)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new M({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new M({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new M({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.handles.add([this.allVisibleMapImages.on("change",t=>{t.added.forEach(e=>this._addMapImage(e)),t.removed.forEach(e=>this._removeMapImage(e))}),Q(()=>this.layer.visibleSublayers,t=>{for(const[e,i]of this._kmlVisualData.allSublayers)i.visibility=0;for(const e of t){const i=this._kmlVisualData.allSublayers.get(e.id);i&&(i.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new h}detach(){this._fetchController.abort(),this._fetchController=null,this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null),this._imageReprojector&&(this._imageReprojector.destroy(),this._imageReprojector=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(t){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(t.href,G.fromJSON(t.extent),this.view.spatialReference).then(e=>{const i=new le(e.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});i.x=e.extent.xmin,i.y=e.extent.ymax,i.resolution=e.extent.width/e.bitmapData.width,i.rotation=t.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(t,i)})}async _getViewDependentUrl(t,e){const{viewFormat:i,viewBoundScale:r,httpQuery:a}=t;if(I(i)){if(X(e))throw new Error("Loading this network link requires a view state.");let s;if(await Z(),I(r)&&r!==1){const _=new G(e.extent);_.expand(r),s=_}else s=e.extent;s=C(s,q.WGS84);const o=C(s,q.WebMercator),m=s.xmin,p=s.xmax,n=s.ymin,c=s.ymax,V=e.size[0]*e.pixelRatio,f=e.size[1]*e.pixelRatio,y=Math.max(o.width,o.height),u={"[bboxWest]":m.toString(),"[bboxEast]":p.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":c.toString(),"[lookatLon]":s.center.x.toString(),"[lookatLat]":s.center.y.toString(),"[lookatRange]":y.toString(),"[lookatTilt]":"0","[lookatHeading]":e.rotation.toString(),"[lookatTerrainLon]":s.center.x.toString(),"[lookatTerrainLat]":s.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":s.center.x.toString(),"[cameraLat]":s.center.y.toString(),"[cameraAlt]":y.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":V.toString(),"[vertPixels]":f.toString(),"[terrainEnabled]":"0","[clientVersion]":ee,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},l=_=>{for(const E in _)for(const P in u)_[E]=_[E].replace(P,u[P])},g=B(i);l(g);let j={};I(a)&&(j=B(a),l(j));const v=te(t.href);return v.query=b(b(b({},v.query),g),j),`${v.path}?${ie(g)}`}return t.href}async _fetchService(t){const e=new $;await this._loadVisualData(this.layer.url,e,t),this._kmlVisualData=e,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(t=>this._isSublayerVisible(t.sublayerId)).map(({item:t})=>t))}_isSublayerVisible(t){const e=this._kmlVisualData.allSublayers.get(t);return!!e.visibility&&(e.parentFolderId===-1||this._isSublayerVisible(e.parentFolderId))}_loadVisualData(t,e,i){return this._fetchParsedKML(t,i).then(async r=>{for(const a of r.sublayers){e.allSublayers.set(a.id,a);const s=a.points?await D(a.points):[],o=a.polylines?await D(a.polylines):[],m=a.polygons?await D(a.polygons):[],p=a.mapImages||[];if(e.allPoints.push(...s.map(n=>({item:n,sublayerId:a.id}))),e.allPolylines.push(...o.map(n=>({item:n,sublayerId:a.id}))),e.allPolygons.push(...m.map(n=>({item:n,sublayerId:a.id}))),e.allMapImages.push(...p.map(n=>({item:n,sublayerId:a.id}))),a.networkLink){const n=await this._getViewDependentUrl(a.networkLink,this.view.state);await this._loadVisualData(n,e,i)}}})}_fetchParsedKML(t,e){return se(t,this.layer.spatialReference,this.layer.refreshInterval,e).then(i=>re(i.data))}_removeMapImage(t){const e=this._bitmapIndex.get(t);e&&(this._mapImageContainer.removeChild(e),this._bitmapIndex.delete(t))}};w([x()],d.prototype,"_pointsView",void 0),w([x()],d.prototype,"_polylinesView",void 0),w([x()],d.prototype,"_polygonsView",void 0),w([x()],d.prototype,"updating",void 0),d=w([ae("esri.views.2d.layers.KMLLayerView2D")],d);const Vt=d;export{Vt as default};
