var P=Object.defineProperty,A=Object.defineProperties;var G=Object.getOwnPropertyDescriptors;var R=Object.getOwnPropertySymbols;var M=Object.prototype.hasOwnProperty,Z=Object.prototype.propertyIsEnumerable;var O=(y,e,t)=>e in y?P(y,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):y[e]=t,b=(y,e)=>{for(var t in e||(e={}))M.call(e,t)&&O(y,t,e[t]);if(R)for(var t of R(e))Z.call(e,t)&&O(y,t,e[t]);return y},k=(y,e)=>A(y,G(e));import{om as I,dw as C,Y as E,oW as v,oj as z,bs as j,a_ as N,a9 as B,K as U,fm as L,O as w,c_ as W,bt as T,dl as Y,a1 as J,b3 as D,dn as V,dq as X,oX as H}from"./vendor.ad8aa1ba.js";import{u as K}from"./FeatureStore.707149b4.js";import{Y as ee}from"./QueryEngine.d603fac3.js";import{L as te,I as se,T as ie}from"./geojson.66d970cf.js";import{o as ne,a as re,i as ae}from"./clientSideDefaults.3c2fc612.js";import{w as oe,m as q,f as x,a as F,g as Q}from"./sourceUtils.02dde70d.js";import"./PooledRBush.0d557589.js";import"./optimizedFeatureQueryEngineAdapter.5439e319.js";import"./centroid.7be204a9.js";import"./QueryEngineCapabilities.78217f95.js";import"./timeSupport.ebeac249.js";const ue={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class Fe{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[];await this._checkProjection(e.spatialReference);let i=null;e.url&&(i=await this._fetch(t==null?void 0:t.signal));const a=te(i,{geometryType:e.geometryType}),u=e.fields||a.fields||[],l=e.hasZ!=null?e.hasZ:a.hasZ,d=a.geometryType;let c=e.objectIdField||a.objectIdFieldName||"__OBJECTID";const f=e.spatialReference||I;let r=e.timeInfo;u===a.fields&&a.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:a.unknownFields}});let n=new C(u).get(c);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,c=n.name):(n={alias:c,name:c,type:a.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},u.unshift(n));const p={};for(const o of u){if(o.name==null&&(o.name=o.alias),o.alias==null&&(o.alias=o.name),!o.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:o});if(!v.jsonValues.includes(o.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${o.name}"`,{field:o});if(o.name!==n.name){const _=z(o);_!==void 0&&(p[o.name]=_)}}this._fieldsIndex=new C(u);const m=this._fieldsIndex.requiredFields.indexOf(n);if(m>-1&&this._fieldsIndex.requiredFields.splice(m,1),r){if(r.startTimeField){const o=this._fieldsIndex.get(r.startTimeField);o?(r.startTimeField=o.name,o.type="esriFieldTypeDate"):r.startTimeField=null}if(r.endTimeField){const o=this._fieldsIndex.get(r.endTimeField);o?(r.endTimeField=o.name,o.type="esriFieldTypeDate"):r.endTimeField=null}if(r.trackIdField){const o=this._fieldsIndex.get(r.trackIdField);o?r.trackIdField=o.name:(r.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:r}}))}r.startTimeField||r.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:r}}),r=null)}const h=d?ne(d):null,g={warnings:s,featureErrors:[],layerDefinition:k(b({},ue),{drawingInfo:h,templates:re(p),extent:null,geometryType:d,objectIdField:c,fields:u,hasZ:!!l,timeInfo:r})};this._queryEngine=new ee({fields:u,geometryType:d,hasM:!1,hasZ:l,objectIdField:c,spatialReference:f,timeInfo:r,featureStore:new K({geometryType:d,hasM:!1,hasZ:l}),cacheSpatialQueries:!0}),this._createDefaultAttributes=ae(p,c);const S=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,S);const $=this._normalizeFeatures(S,g.warnings,g.featureErrors);if(this._queryEngine.featureStore.addMany($),g.layerDefinition.extent=this._queryEngine.fullExtent,g.layerDefinition.timeInfo){const{start:o,end:_}=this._queryEngine.timeExtent;g.layerDefinition.timeInfo.timeExtent=[o,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([oe(t,s),j(e.adds,t),j(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._loadOptions.customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=N(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const i=this._normalizeFeatures(s);i&&this._queryEngine.featureStore.addMany(i)},s=>{this._queryEngine.featureStore.clear(),B(s)||U.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent}}async _createFeatures(e){const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,a=se(e,{geometryType:t,hasZ:s,objectIdField:i});if(!L(this._queryEngine.spatialReference,I))for(const u of a)w(u.geometry)&&(u.geometry=W(T(Y(u.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return a}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await J(t,{responseType:"json",query:b({},s),signal:e})).data;return await ie(i),i}_normalizeFeatures(e,t,s){const{objectIdField:i}=this._queryEngine,a=[];for(const u of e){const l=this._createDefaultAttributes(),d=q(this._fieldsIndex,l,u.attributes,!0,t);d?s==null||s.push(d):(this._assignObjectId(l,u.attributes,!0),u.attributes=l,u.objectId=l[i],a.push(u))}return a}_applyEdits(e){const{adds:t,updates:s,deletes:i}=e,a={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(a,t),s&&s.length&&this._applyUpdateEdits(a,s),i&&i.length){for(const u of i)a.deleteResults.push(x(u));this._queryEngine.featureStore.removeManyById(i)}return{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:a}}_applyAddEdits(e,t){var r;const{addResults:s}=e,{geometryType:i,hasM:a,hasZ:u,objectIdField:l,spatialReference:d,featureStore:c}=this._queryEngine,f=[];for(const n of t){if(n.geometry&&i!==D(n.geometry)){s.push(F("Incorrect geometry type."));continue}const p=this._createDefaultAttributes(),m=q(this._fieldsIndex,p,n.attributes);if(m)s.push(m);else{if(this._assignObjectId(p,n.attributes),n.attributes=p,n.uid!=null){const h=n.attributes[l];e.uidToObjectId[n.uid]=h}if(w(n.geometry)){const h=(r=n.geometry.spatialReference)!=null?r:d;n.geometry=T(Q(n.geometry,h),h,d)}f.push(n),s.push(x(n.attributes[l]))}}c.addMany(V([],f,i,u,a,l))}_applyUpdateEdits({updateResults:e},t){var c;const{geometryType:s,hasM:i,hasZ:a,objectIdField:u,spatialReference:l,featureStore:d}=this._queryEngine;for(const f of t){const{attributes:r,geometry:n}=f,p=r&&r[u];if(p==null){e.push(F(`Identifier field ${u} missing`));continue}if(!d.has(p)){e.push(F(`Feature with object id ${p} missing`));continue}const m=X(d.getFeature(p),s,a,i);if(w(n)){if(s!==D(n)){e.push(F("Incorrect geometry type."));continue}const h=(c=n.spatialReference)!=null?c:l;m.geometry=T(Q(n,h),h,l)}if(r){const h=q(this._fieldsIndex,m.attributes,r);if(h){e.push(h);continue}}d.add(H(m,s,a,i,u)),e.push(x(p))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const a of t)a.objectId&&(i=Math.max(i,a.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await j(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{Fe as default};
