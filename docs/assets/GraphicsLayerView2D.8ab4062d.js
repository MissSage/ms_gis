import{em as a,hA as h,aq as r,ar as o,as as p}from"./vendor.f59460b9.js";import{y as c}from"./LayerView2D.4cbf4b16.js";import{i as l}from"./GraphicContainer.5a3358d3.js";import{o as m}from"./BaseGraphicContainer.c8b13bec.js";import{u as d}from"./LayerView.62cad0ec.js";import"./utils.2943fe63.js";import"./Utils.d99d4263.js";import"./number.30628ef2.js";import"./enums.2d9e6f64.js";import"./Texture.68429d95.js";import"./VertexElementDescriptor.1fdca6da.js";import"./MaterialKey.a0e626ef.js";import"./alignmentUtils.6849a0a8.js";import"./definitions.d3c1cadf.js";import"./cimAnalyzer.c46e6e24.js";import"./BidiEngine.d8bba3fc.js";import"./Rect.95b0fd2e.js";import"./callExpressionWithFeature.837acd5e.js";import"./GeometryUtils.4f19e772.js";import"./floatRGBA.48a1a1fe.js";import"./normalizeUtilsSync.b6097452.js";import"./VertexArrayObject.aedfa412.js";import"./FeatureContainer.b77d10e5.js";import"./TileContainer.2ecf5cfc.js";import"./WGLContainer.36a5457c.js";import"./pixelUtils.2345058e.js";import"./vec4f32.f3b49d2e.js";import"./ProgramTemplate.58a17754.js";import"./StyleDefinition.32daf7f5.js";import"./config.82550349.js";import"./GeometryUtils.51c4032a.js";import"./earcut.afc1d357.js";import"./visualVariablesUtils.5c61b68c.js";import"./visualVariablesUtils.ba4abc49.js";import"./Matcher.edc1d648.js";import"./tileUtils.387e3a42.js";import"./TileClipper.9925b336.js";import"./Geometry.d049a63c.js";import"./ExpandedCIM.8408bb4d.js";import"./devEnvironmentUtils.d8d0484c.js";import"./schemaUtils.fd351f45.js";import"./createSymbolSchema.649358ad.js";import"./util.9cd692f9.js";import"./ComputedAttributeStorage.f4c73f1f.js";import"./centroid.b73c73db.js";import"./vec3f32.1121a836.js";const g={remove(){},pause(){},resume(){}};let s=class extends c(d){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new m({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new l(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate)}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof a?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):h.isCollection(i)&&i.length>0&&(t=i.map(e=>e&&e.uid).toArray()),t=t==null?void 0:t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>this._removeHighlight(t)}):g}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};r([o()],s.prototype,"graphicsView",void 0),s=r([p("esri.views.2d.layers.GraphicsLayerView2D")],s);const hi=s;export{hi as default};
